import telebot
import sqlite3
import random
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —Ü—ñ –º–æ–¥—É–ª—ñ —Ç–∞ —ó—Ö —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å
from loot_items import LOOT_ITEMS, get_item_info, get_random_loot
from db_utils import add_drachmas_to_user, get_user_drachmas, get_user_inventory, remove_item_from_inventory, add_item_to_inventory, get_item_quantity_in_inventory, get_user_equipped_item, clear_inventory

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É
SPECIAL_OFFER_COOLDOWN = 20 * 3600 # 20 –≥–æ–¥–∏–Ω
SPECIAL_OFFER_DURATION = 2 * 3600 # 2 –≥–æ–¥–∏–Ω–∏
MARKET_UPDATE_COOLDOWN = 4 * 3600 # 4 –≥–æ–¥–∏–Ω–∏

def get_market_info():
    conn = sqlite3.connect('percy_jackson_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT item_id, special_offer_price, special_offer_end_time FROM market')
    result = cursor.fetchone()
    conn.close()
    return result

def get_market_items():
    conn = sqlite3.connect('percy_jackson_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT item_id, item_name, item_price, last_updated FROM market_items_for_sale')
    result = cursor.fetchall()
    conn.close()
    return result

def update_market_offer():
    conn = sqlite3.connect('percy_jackson_bot.db')
    cursor = conn.cursor()
    
    current_time = int(time.time())
    
    cursor.execute('SELECT * FROM market')
    offer_exists = cursor.fetchone()

    if not offer_exists or offer_exists[2] < current_time:
        all_items = [item for activity in LOOT_ITEMS.values() for rarity in activity.values() for item in rarity]
        if all_items:
            random_item = random.choice(all_items)
            special_price = round(random_item['value'] * 1.1)
            end_time = current_time + SPECIAL_OFFER_DURATION
            
            cursor.execute('INSERT OR REPLACE INTO market (item_id, special_offer_price, special_offer_end_time) VALUES (?, ?, ?)',
                           (random_item['id'].strip(), special_price, end_time))
            conn.commit()
    conn.close()

def update_market_items():
    conn = sqlite3.connect('percy_jackson_bot.db')
    cursor = conn.cursor()
    
    current_time = int(time.time())
    
    cursor.execute('SELECT last_updated FROM market_items_for_sale LIMIT 1')
    last_updated_time = cursor.fetchone()
    
    if not last_updated_time or (current_time - last_updated_time[0]) > MARKET_UPDATE_COOLDOWN:
        cursor.execute('DELETE FROM market_items_for_sale')
        
        all_items = [item for activity in LOOT_ITEMS.values() for rarity in activity.values() for item in rarity]
        random_items = random.sample(all_items, k=5)
        
        for item in random_items:
            cursor.execute('INSERT INTO market_items_for_sale (item_id, item_name, item_price, last_updated) VALUES (?, ?, ?, ?)',
                           (item['id'].strip(), item['name'], item['value'], current_time))
        conn.commit()
    conn.close()

def sell_item_on_market_logic(user_id, item_id, quantity=1, special_offer=False):
    item_quantity = get_item_quantity_in_inventory(user_id, item_id.strip())
    
    if item_quantity < quantity:
        return None
    
    item_info = get_item_info(item_id.strip())
    if not item_info:
        return None

    if special_offer:
        market_info = get_market_info()
        if market_info and market_info[0].strip() == item_id.strip() and market_info[2] > time.time():
            sale_price = market_info[1]
        else:
            return None
    else:
        sale_price = int(item_info['value'] * 0.85)

    total_sale_value = int(sale_price * quantity)
    add_drachmas_to_user(user_id, total_sale_value)
    
    remove_item_from_inventory(user_id, item_id.strip(), quantity)
    
    return total_sale_value

def buy_item_from_market_logic(user_id, item_id, quantity=1):
    drachmas = get_user_drachmas(user_id)
    item_info = get_item_info(item_id.strip())
    
    if not item_info:
        return {'status': 'error', 'message': '–¶–µ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'}

    price = item_info['value'] * quantity
    if drachmas < price:
        return {'status': 'error', 'message': '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥—Ä–∞—Ö–º.'}

    add_item_to_inventory(user_id, item_id.strip(), quantity)

    conn = sqlite3.connect('percy_jackson_bot.db')
    cursor = conn.cursor()
    new_drachmas = drachmas - price
    cursor.execute('UPDATE users SET drachmas = ? WHERE user_id = ?', (new_drachmas, user_id))
    conn.commit()
    conn.close()
    
    return {'status': 'success', 'message': f"–í–∏ –∫—É–ø–∏–ª–∏ **{item_info['name']}** –∑–∞ {price} –¥—Ä–∞—Ö–º."}

def show_market(message, bot):
    update_market_offer()
    
    market_text = "üèõ **–†–∏–Ω–æ–∫ –º–∞–≥—ñ—á–Ω–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤**\n"
    market_text += "–í —Ü–µ–π —è—Å–Ω–∏–π –¥–µ–Ω—å –≤–∏ –≤–∏–±—Ä–∞–ª–∏—Å—å –Ω–∞ –º–∞—Ä–∫–µ—Ç. –ù–∞–≤–∫–æ–ª–æ –≤–∏ –±–∞—á–∏—Ç–µ –Ω–µ —Ç–∞–∫ –≤–∂–µ –π –±–∞–≥–∞—Ç–æ —ñ—Å—Ç–æ—Ç, –∞–ª–µ —Ä–æ–∑—É–º—ñ—î—Ç–µ —â–æ —Å–∞–º–µ —Ç—É—Ç –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏ –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–µ, –∞–±–æ –∑–Ω–∞–π—Ç–∏ —Ç–µ, —â–æ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–æ–¥–æ—Ä–æ–∂–µ–π."
    
    markup = InlineKeyboardMarkup()
    
    # ------------------ –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è ------------------
    market_info = get_market_info()
    if market_info:
        item_id, special_price, end_time = market_info
        item_info = get_item_info(item_id.strip())
        if item_info and end_time > time.time():
            # –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ —Å–ø–µ—Ü. –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
            market_text += f"\n\nüî• **–°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –ü–†–û–ü–û–ó–ò–¶–Ü–Ø!**\n"
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É, —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
            time_left = end_time - time.time()
            hours_left = int(time_left // 3600)
            minutes_left = int((time_left % 3600) // 60)
            
            market_text += f"–°—å–æ–≥–æ–¥–Ω—ñ **{item_info['name']}** –º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞—Ç–∏ –∑–∞ **{int(special_price)} –¥—Ä–∞—Ö–º** –∑–∞ –æ–¥–∏–Ω–∏—Ü—é!\n"
            market_text += f"–ê–∫—Ü—ñ—è –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑: {hours_left} –≥–æ–¥ {minutes_left} —Ö–≤."
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–∞–∂—É –∑–∞ –∞–∫—Ü—ñ–π–Ω–æ—é —Ü—ñ–Ω–æ—é
            markup.add(InlineKeyboardButton(f"üí∞ –ü—Ä–æ–¥–∞—Ç–∏ {item_info['name']} –ø–æ –∞–∫—Ü—ñ—ó", callback_data=f'sell_special_{item_id.strip()}'))

    # ------------------ –ó–∞–≥–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç–∏" —Ç–∞ "–ü—Ä–æ–¥–∞—Ç–∏" ------------------
    # –¶—ñ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏–º—É—Ç—å —ñ–Ω—à–∏–π "—à–∞—Ä" —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, —è–∫ –Ω–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ
    markup.add(
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç–∏", callback_data='show_buy_menu'),
        InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç–∏", callback_data='show_sell_menu')
    )
    
    bot.send_message(message.chat.id, market_text, parse_mode='Markdown', reply_markup=markup)

def show_buy_menu(call, bot):
    update_market_items()
    market_items = get_market_items()
    markup = InlineKeyboardMarkup()
    
    if market_items:
        for item_id, item_name, item_price, _ in market_items:
            markup.add(InlineKeyboardButton(f"–ö—É–ø–∏—Ç–∏ {item_name} ({item_price} –¥—Ä–∞—Ö–º)", callback_data=f'buy_{item_id.strip()}'))
            
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_market'))

    bot.edit_message_text("üõçÔ∏è **–¢–æ–≤–∞—Ä–∏ –Ω–∞ —Ä–∏–Ω–∫—É:**\n\n–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏:",
                          call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='Markdown')

def show_sell_menu(call, bot):
    user_id = call.from_user.id
    user_inventory = get_user_inventory(user_id)
    markup = InlineKeyboardMarkup()
    
    if user_inventory:
        for item_id, quantity in user_inventory:
            item_info = get_item_info(item_id.strip())
            if item_info:
                sell_price = int(item_info['value'] * 0.85)
                markup.add(InlineKeyboardButton(f"–ü—Ä–æ–¥–∞—Ç–∏ {item_info['name']} (x{quantity}) –∑–∞ {sell_price} –¥—Ä–∞—Ö–º", callback_data=f'sell_{item_id.strip()}'))

    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_market'))

    bot.edit_message_text("üí∞ **–í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂—É:**\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç–∏:",
                          call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='Markdown')

def sell_item_callback(call, bot):
    user_id = call.from_user.id
    item_id = call.data.replace('sell_', '').strip()
    special_offer = False

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è
    if call.data.startswith('sell_special_'):
        item_id = call.data.replace('sell_special_', '').strip()
        special_offer = True

    equipped_item_id = get_user_equipped_item(user_id)
    if equipped_item_id == item_id:
        equipped_item_name = get_item_info(equipped_item_id)['name']
        bot.answer_callback_query(call.id, f"‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–Ω—ñ–º—ñ—Ç—å –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç ({equipped_item_name}), —â–æ–± –π–æ–≥–æ –ø—Ä–æ–¥–∞—Ç–∏.", show_alert=True)
        return

    item_quantity = get_item_quantity_in_inventory(user_id, item_id)
    if item_quantity < 1:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ.", show_alert=True)
        return

    result = sell_item_on_market_logic(user_id, item_id, special_offer=special_offer)
    if result is not None:
        item_info = get_item_info(item_id)
        bot.answer_callback_query(call.id, f"‚úÖ –í–∏ –ø—Ä–æ–¥–∞–ª–∏ {item_info['name']} –∑–∞ {result} –¥—Ä–∞—Ö–º.")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –ø—Ä–æ–¥–∞–∂—É
        show_market(call.message, bot)
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–¥–∞—Ç–∏ —Ü–µ–π –ø—Ä–µ–¥–º–µ—Ç –∑–∞ —Ü—ñ—î—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é.", show_alert=True)

def buy_item_callback(call, bot):
    user_id = call.from_user.id
    item_id = call.data.replace('buy_', '').strip()
    
    item_info = get_item_info(item_id.strip())
    if not item_info:
        bot.answer_callback_query(call.id, "–¶–µ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Ä–∏–Ω–∫—É.", show_alert=True)
        return

    result = buy_item_from_market_logic(user_id, item_id.strip())
    
    if result['status'] == 'success':
        bot.answer_callback_query(call.id, result['message'], show_alert=True)
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –º–µ–Ω—é –∫—É–ø—ñ–≤–ª—ñ
        show_buy_menu(call, bot)
    else:
        bot.answer_callback_query(call.id, result['message'], show_alert=True)

def register_market_handlers(bot):
    bot.message_handler(commands=['market'])(lambda m: show_market(m, bot))
    bot.callback_query_handler(func=lambda call: call.data == 'show_buy_menu')(lambda c: show_buy_menu(c, bot))
    bot.callback_query_handler(func=lambda call: call.data == 'show_sell_menu')(lambda c: show_sell_menu(c, bot))
    bot.callback_query_handler(func=lambda call: call.data == 'back_to_market')(lambda c: show_market(c.message, bot))
    bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))(lambda c: buy_item_callback(c, bot))
    bot.callback_query_handler(func=lambda call: call.data.startswith('sell_'))(lambda c: sell_item_callback(c, bot))
    bot.callback_query_handler(func=lambda call: call.data.startswith('sell_special_'))(lambda c: sell_item_callback(c, bot))