import telebot
import sqlite3
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from loot_items import get_item_info
from db_utils import add_drachmas_to_user, get_user_inventory, clear_inventory, remove_item_from_inventory, get_user_energy, set_user_energy, get_item_quantity_in_inventory, equip_item, unequip_item, get_user_equipped_item

def _get_inventory_display_and_markup(user_id):
    items = get_user_inventory(user_id)
    equipped_item_id = get_user_equipped_item(user_id)
    
    inventory_text = "üéí **–í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä:**\n"
    markup = InlineKeyboardMarkup()
    
    if not items:
        inventory_text += "\n_–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π._"
    else:
        for item_id, quantity in items:
            item_info = get_item_info(item_id)
            if item_info:
                item_name = item_info['name']
                item_value = int(item_info['value'] * 0.5)
                
                is_equipped = (item_id == equipped_item_id)
                equipped_text = " (–ï–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ)" if is_equipped else ""
                
                inventory_text += f"\n‚ñ™Ô∏è **{item_name}** (x{quantity}){equipped_text}\n"
                
                if item_info.get('type') == 'weapon':
                    if is_equipped:
                        markup.add(InlineKeyboardButton(f"üö´ –ó–Ω—è—Ç–∏ {item_name}", callback_data=f'unequip_item_{item_id}'))
                    else:
                        markup.add(InlineKeyboardButton(f"‚öîÔ∏è –û–¥—è–≥—Ç–∏ {item_name}", callback_data=f'equip_item_{item_id}'))
                elif 'potion' in item_id:
                    markup.add(InlineKeyboardButton(f"üß™ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ {item_name}", callback_data=f'use_item_{item_id}'))
                else:
                    markup.add(InlineKeyboardButton(f"üí∞ –ü—Ä–æ–¥–∞—Ç–∏ {item_name} ({item_value} –¥—Ä–∞—Ö–º)", callback_data=f'sell_item_{item_id}'))
        
        markup.add(InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç–∏ –≤—Å–µ (50% —Ü—ñ–Ω–∏)", callback_data='sell_all_items'))

    return inventory_text, markup

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /inventory
def show_inventory(message, bot):
    user_id = message.from_user.id
    inventory_text, markup = _get_inventory_display_and_markup(user_id)
    bot.send_message(message.chat.id, inventory_text, parse_mode='Markdown', reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–¥—è–≥—Ç–∏"
def equip_item_callback(call, bot):
    user_id = call.from_user.id
    item_id = call.data.replace('equip_item_', '')
    
    item_quantity = get_item_quantity_in_inventory(user_id, item_id)
    if item_quantity < 1:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ.", show_alert=True)
        return
        
    equipped_item_id = get_user_equipped_item(user_id)
    if equipped_item_id and equipped_item_id != item_id:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å —É–∂–µ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç. –ó–Ω—ñ–º—ñ—Ç—å –π–æ–≥–æ —Å–ø–æ—á–∞—Ç–∫—É.", show_alert=True)
        return

    equip_item(user_id, item_id)
    bot.answer_callback_query(call.id, f"‚úÖ –í–∏ –æ–¥—è–≥–Ω—É–ª–∏ {get_item_info(item_id)['name']}!")
    
    inventory_text, markup = _get_inventory_display_and_markup(user_id)
    bot.edit_message_text(inventory_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–Ω—è—Ç–∏"
def unequip_item_callback(call, bot):
    user_id = call.from_user.id
    item_id = call.data.replace('unequip_item_', '')
    
    equipped_item_id = get_user_equipped_item(user_id)
    if equipped_item_id != item_id:
        bot.answer_callback_query(call.id, "–¶–µ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π.", show_alert=True)
        return
        
    unequip_item(user_id)
    bot.answer_callback_query(call.id, f"‚úÖ –í–∏ –∑–Ω—è–ª–∏ {get_item_info(item_id)['name']}!")
    
    inventory_text, markup = _get_inventory_display_and_markup(user_id)
    bot.edit_message_text(inventory_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏"
def use_item_callback(call, bot):
    user_id = call.from_user.id
    item_id = call.data.replace('use_item_', '')
    
    item_info = get_item_info(item_id)
    if not item_info:
        bot.answer_callback_query(call.id, "–¶–µ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    item_quantity = get_item_quantity_in_inventory(user_id, item_id)
    
    if item_quantity < 1:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ.", show_alert=True)
        return

    current_energy = get_user_energy(user_id)
    max_energy = 15
        
    if current_energy >= max_energy:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –ø–æ–≤–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è!", show_alert=True)
        return

    energy_to_restore = 0
    if item_id == 'small_potion':
        energy_to_restore = 5
    elif item_id == 'medium_potion':
        energy_to_restore = 10
    elif item_id == 'big_potion':
        energy_to_restore = 15

    new_energy = min(current_energy + energy_to_restore, max_energy)
    set_user_energy(user_id, new_energy)
    remove_item_from_inventory(user_id, item_id)
    
    bot.answer_callback_query(call.id, f"‚úÖ –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ {item_info['name']}. –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ {new_energy - current_energy} –µ–Ω–µ—Ä–≥—ñ—ó.", show_alert=True)
    
    inventory_text, markup = _get_inventory_display_and_markup(user_id)
    bot.edit_message_text(inventory_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–∞—Ç–∏ –≤—Å–µ"
def sell_all_items_callback(call, bot):
    user_id = call.from_user.id
    items = get_user_inventory(user_id)
    equipped_item_id = get_user_equipped_item(user_id)
    
    if not items:
        bot.answer_callback_query(call.id, "–Ü–Ω–≤–µ–Ω—Ç–∞—Ä —É–∂–µ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    if equipped_item_id:
        equipped_item_name = get_item_info(equipped_item_id)['name']
        bot.answer_callback_query(call.id, f"‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–Ω—ñ–º—ñ—Ç—å –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç ({equipped_item_name}), —â–æ–± –ø—Ä–æ–¥–∞—Ç–∏ –≤—Å–µ.", show_alert=True)
        return
    
    total_sale_value = 0
    for item_id, quantity in items:
        item_info = get_item_info(item_id)
        if item_info:
            total_sale_value += (item_info['value'] * quantity * 0.5)
            
    add_drachmas_to_user(user_id, int(total_sale_value))
    clear_inventory(user_id)
    
    bot.answer_callback_query(call.id, f"‚úÖ –í–∏ –ø—Ä–æ–¥–∞–ª–∏ –≤–µ—Å—å —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –∑–∞ {int(total_sale_value)} –¥—Ä–∞—Ö–º!")
    
    inventory_text, markup = _get_inventory_display_and_markup(user_id)
    bot.edit_message_text(inventory_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–∞–∂—É –æ–∫—Ä–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
def sell_single_item_callback(call, bot):
    user_id = call.from_user.id
    item_id = call.data.replace('sell_item_', '')
    
    equipped_item_id = get_user_equipped_item(user_id)
    if equipped_item_id == item_id:
        equipped_item_name = get_item_info(equipped_item_id)['name']
        bot.answer_callback_query(call.id, f"‚ùå –°–ø–æ—á–∞—Ç–∫—É –∑–Ω—ñ–º—ñ—Ç—å –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç ({equipped_item_name}), —â–æ–± –π–æ–≥–æ –ø—Ä–æ–¥–∞—Ç–∏.", show_alert=True)
        return

    item_quantity = get_item_quantity_in_inventory(user_id, item_id)
    
    if item_quantity < 1:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ.", show_alert=True)
        return
        
    item_info = get_item_info(item_id)
    item_value = int(item_info['value'] * 0.5)
    
    remove_item_from_inventory(user_id, item_id)
    add_drachmas_to_user(user_id, item_value)
    
    bot.answer_callback_query(call.id, f"‚úÖ –í–∏ –ø—Ä–æ–¥–∞–ª–∏ {item_info['name']} –∑–∞ {item_value} –¥—Ä–∞—Ö–º.")
    
    inventory_text, markup = _get_inventory_display_and_markup(user_id)
    bot.edit_message_text(inventory_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)

def register_inventory_handlers(bot):
    bot.message_handler(commands=['inventory'])(lambda m: show_inventory(m, bot))
    bot.callback_query_handler(func=lambda call: call.data == 'sell_all_items')(lambda c: sell_all_items_callback(c, bot))
    bot.callback_query_handler(func=lambda call: call.data.startswith('sell_item_'))(lambda c: sell_single_item_callback(c, bot))
    bot.callback_query_handler(func=lambda call: call.data.startswith('use_item_'))(lambda c: use_item_callback(c, bot))
    bot.callback_query_handler(func=lambda call: call.data.startswith('equip_item_'))(lambda c: equip_item_callback(c, bot))
    bot.callback_query_handler(func=lambda call: call.data.startswith('unequip_item_'))(lambda c: unequip_item_callback(c, bot))