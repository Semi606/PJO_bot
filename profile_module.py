import telebot
import sqlite3
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from db_utils import save_user_profile, get_user_profile, get_user_drachmas, get_user_energy, get_user_strength, get_user_equipped_item
from loot_items import get_item_info

# –°–ø–∏—Å–æ–∫ –±–æ–≥—ñ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —ñ –º–∞–ø–ø—ñ–Ω–≥ –¥–æ –Ω–æ–º–µ—Ä—ñ–≤ –∫–∞–±—ñ–Ω
GODS_LIST = [
    "–ó–µ–≤—Å", "–ì–µ—Ä–∞", "–ü–æ—Å–µ–π–¥–æ–Ω", "–î–µ–º–µ—Ç—Ä–∞", "–ê—Ä–µ—Å", "–ê—Ñ—ñ–Ω–∞", "–ê–ø–æ–ª–ª–æ–Ω", "–ê—Ä—Ç–µ–º—ñ–¥–∞",
    "–ì–µ—Ñ–µ—Å—Ç", "–ê—Ñ—Ä–æ–¥—ñ—Ç–∞", "–ì–µ—Ä–º–µ—Å", "–î—ñ–æ–Ω—ñ—Å", "–ê—ó–¥", "–Ü—Ä—ñ—Å", "–ì—ñ–ø–Ω–æ—Å",
    "–ù–µ–º–µ–∑—ñ–¥–∞", "–ù–∞–π–∫", "–ì–µ–±–∞", "–¢—ñ—Ö–µ", "–ì–µ–∫–∞—Ç–∞"
]
GODS_TO_CABIN = {god: index + 1 for index, god in enumerate(GODS_LIST)}
    
# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
def handle_new_member(message, bot):
    for user in message.new_chat_members:
        save_user_profile(user.id, user.first_name)
        
        username = user.first_name
        welcome_message = (
            f"–ü—Ä–∏–≤—ñ—Ç, {username}! –í—ñ—Ç–∞—î–º–æ –≤ —á–∞—Ç—ñ —Ñ–∞–Ω–∞—Ç—ñ–≤ '–ü–µ—Ä—Å—ñ –î–∂–µ–∫—Å–æ–Ω–∞'. "
            "–†–æ–∑–∫—Ä–∏–π –Ω–∞–º —Ç–∞—î–º–Ω–∏—Ü—é - —è–∫–æ–≥–æ –±–æ–≥–∞ —Ç–∏ –¥–∏—Ç–∏–Ω–∞? "
            "–Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à - –Ω–µ –±—ñ–¥–∞. –¶–µ –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
            "https://www.percyjacksongetclaimed.com/p/global"
        )
        bot.send_message(message.chat.id, welcome_message)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /create –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def create_profile(message, bot):
    user_id = message.from_user.id
    username = message.from_user.first_name
    
    profile = get_user_profile(user_id)
    if not profile:
        save_user_profile(user_id, username)
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /edit.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –≤–∂–µ —î –ø—Ä–æ—Ñ—ñ–ª—å.")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /profile
def show_profile(message, bot):
    user_id = message.from_user.id
    profile = get_user_profile(user_id)
    
    if profile:
        _, username, parent, pronouns, drachmas, energy, _, strength, health, defense, equipped_item, last_energy_restore_time = profile
        
        parent_info = parent if parent else "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        
        cabin_number_str = GODS_TO_CABIN.get(parent, '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')
        if isinstance(cabin_number_str, int):
            cabin_number_str = f"–ö–∞–±—ñ–Ω–∞ {cabin_number_str}"
        
        pronouns_info = pronouns if pronouns else "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
        
        energy_status = f"‚ö° **–ï–Ω–µ—Ä–≥—ñ—è:** {energy}/15"
        if energy < 15:
            time_left = 1800 - (int(time.time()) - last_energy_restore_time) % 1800
            minutes = int(time_left // 60)
            seconds = int(time_left % 60)
            energy_status += f" (–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ {minutes} —Ö–≤ {seconds} —Å)"
        
        equipped_item_name = "–Ω–µ–º–∞—î"
        equipped_item_bonus = 0
        if equipped_item:
            item_info = get_item_info(equipped_item)
            if item_info and item_info.get('type') == 'weapon':
                equipped_item_name = item_info['name']
                equipped_item_bonus = item_info['strength_bonus']
        
        final_strength = strength + equipped_item_bonus

        profile_message = (
            f"**–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}**\n\n"
            f"üë§ **–Ü–º'—è:** {username}\n"
            f"üó£ **–ó–∞–π–º–µ–Ω–Ω–∏–∫–∏:** {pronouns_info}\n"
            f"üèõ **–î–∏—Ç–∏–Ω–∞ –±–æ–≥–∞:** {parent_info}\n"
            f"üè† **–ë—É–¥–∏–Ω–æ–∫:** {cabin_number_str}\n"
            f"üí∞ **–ì–∞–º–∞–Ω–µ—Ü—å:** {drachmas} –¥—Ä–∞—Ö–º\n"
            f"{energy_status}\n"
            f"‚ù§Ô∏è **–ó–¥–æ—Ä–æ–≤'—è:** {health}\n"
            f"üõ° **–ó–∞—Ö–∏—Å—Ç:** {defense}\n"
            f"üí™ **–°–∏–ª–∞:** {final_strength} (–±–∞–∑–æ–≤–∞: {strength})\n"
            f"‚öîÔ∏è **–ï–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ:** {equipped_item_name}"
        )
        bot.send_message(message.chat.id, profile_message, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /create.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑ –±–æ–≥–∞–º–∏
def gen_gods_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    
    buttons = [InlineKeyboardButton(god, callback_data=f"set_god_{god}") for god in GODS_LIST]
    markup.add(*buttons)
    return markup

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /edit
def start_edit_profile(message, bot):
    user_id = message.from_user.id
    
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö –∑ –±–æ—Ç–æ–º.")
        return
    
    bot.send_message(
        user_id, 
        "‚úèÔ∏è **–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é**\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –±–æ–≥–∞, —á–∏—î—é –¥–∏—Ç–∏–Ω–æ—é –≤–∏ —î, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. "
        "–î–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –¥–∞–Ω–∏—Ö (—ñ–º'—è, –∑–∞–π–º–µ–Ω–Ω–∏–∫–∏), –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`–Ü–º'—è: –í–∞—à–µ –Ω–æ–≤–µ —ñ–º'—è`\n"
        "`–ó–∞–π–º–µ–Ω–Ω–∏–∫–∏: –í–∞—à—ñ –∑–∞–π–º–µ–Ω–Ω–∏–∫–∏`",
        parse_mode='Markdown'
    )
    
    bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ–≥–æ –±–æ–≥–∞:", reply_markup=gen_gods_markup())

# –û–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫
def callback_set_god(call, bot):
    user_id = call.from_user.id
    username = call.from_user.first_name
    
    god = call.data.replace('set_god_', '')
    
    save_user_profile(user_id, username, parent=god)
    
    bot.answer_callback_query(call.id, f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: {god}. –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    cabin_number_str = GODS_TO_CABIN.get(god, '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')
    if isinstance(cabin_number_str, int):
        cabin_number_str = f"–ö–∞–±—ñ–Ω–∞ {cabin_number_str}"

    bot.send_message(call.message.chat.id, f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ! –í–∞—à –±—É–¥–∏–Ω–æ–∫: **{cabin_number_str}**", parse_mode='Markdown')

# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤
def edit_other_profile_fields(message, bot):
    user_id = message.from_user.id
    text = message.text
    
    current_profile = get_user_profile(user_id)
    if not current_profile:
        bot.send_message(user_id, "–°–ø–æ—á–∞—Ç–∫—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /create, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å.")
        return
        
    _, current_username, current_parent, current_pronouns, _, _, _, _, _, _, _, _ = current_profile
    
    lines = text.split('\n')
    new_data = {}
    for line in lines:
        try:
            key, value = line.split(':', 1)
            new_data[key.strip()] = value.strip()
        except ValueError:
            pass
            
    new_username = new_data.get("–Ü–º'—è", current_username)
    new_pronouns = new_data.get("–ó–∞–π–º–µ–Ω–Ω–∏–∫–∏", current_pronouns)
    
    save_user_profile(user_id, new_username, parent=current_parent, pronouns=new_pronouns)
    
    bot.send_message(user_id, "‚úÖ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
def register_profile_handlers(bot):
    bot.message_handler(content_types=['new_chat_members'])(lambda m: handle_new_member(m, bot))
    bot.message_handler(commands=['create'])(lambda m: create_profile(m, bot))
    bot.message_handler(commands=['profile'])(lambda m: show_profile(m, bot))
    bot.message_handler(commands=['edit'])(lambda m: start_edit_profile(m, bot))
    bot.callback_query_handler(func=lambda call: call.data.startswith('set_god_'))(lambda c: callback_set_god(c, bot))
    bot.message_handler(func=lambda message: message.text and ("–Ü–º'—è:" in message.text or "–ó–∞–π–º–µ–Ω–Ω–∏–∫–∏:" in message.text) and message.chat.type == "private")(lambda m: edit_other_profile_fields(m, bot))